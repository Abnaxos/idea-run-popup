import java.time.LocalDateTime

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.3.6'
        classpath 'org.ajoberstar:grgit:1.7.2'
    }
}

buildDir = 'target'
apply plugin:'java'
apply plugin:'idea'
apply plugin:'org.jetbrains.intellij'

version = versionFromGit()

intellij {
    version = 'IC-2018.3'
    updateSinceUntilBuild = false
}

//noinspection GroovyAssignabilityCheck
task updateLicense() {

    ext.copyrightProfile = file(file('.idea/copyright/MIT.xml'))
    ext.licenseFile = file('LICENSE')

    inputs.file copyrightProfile
    outputs.file licenseFile

    doFirst {
        String lic = new XmlSlurper().parse(copyrightProfile as File).copyright.option.find({it.@name=='notice'}).@value as String
        lic = lic.replaceAll('(\\\$|&#36;)today.year(\\b)', "${LocalDateTime.now().year}\$2")
        licenseFile.text = lic
    }

}

buildPlugin {
    dependsOn updateLicense
    from updateLicense.licenseFile
}

patchPluginXml {
    String repoContentRootUrl = 'https://raw.githubusercontent.com/Abnaxos/idea-run-popup/'
    if (version.contains('SNAPSHOT')) {
        repoContentRootUrl += 'develop'
    } else {
        repoContentRootUrl += project.version
    }

    inputs.property 'repoContentRootUrl', repoContentRootUrl

    doLast {
        new File(destinationDir, 'plugin.xml').with {
            setText(getText('UTF-8').replace('@@repoContentRootUrl@@', repoContentRootUrl), 'UTF-8')
        }
    }
}

//
// versioning from gitflow
//
@SuppressWarnings("UnnecessaryQualifiedReference")
def versionFromGit() {
    org.ajoberstar.grgit.Grgit git
    try {
        //noinspection GroovyAssignabilityCheck
        git = org.ajoberstar.grgit.Grgit.open(dir: project.rootDir)
    } catch (e) {
        throw new ProjectConfigurationException("Cannot open git repository: $e", e)
    }
    String currentBranch = git.branch.current.name

    def gitVersion
    //noinspection GroovyAssignabilityCheck
    if (currentBranch == 'master') {
        List<String> candidates = git.tag.list().findAll({it.commit==git.head()})*.name?.findAll({it =~ /\d+(\.\d+)+/})
        if (candidates.size() != 1) {
            throw new ProjectConfigurationException("No distinct version tag found; candidates: $candidates", null)
        }
        gitVersion = candidates[0]
    } else {
        //noinspection GroovyAssignabilityCheck
        gitVersion = (~/.*\/(\d+(\.\d+)+)/).matcher(currentBranch).with {
            matches() ? "${group(1)}-SNAPSHOT" : 'SNAPSHOT'
        }
    }
    logger.quiet "Version from git: $gitVersion"
    return gitVersion
}
